# Generated by Django 5.1.1 on 2024-09-07 11:52

import datetime
import random
import time
import uuid
from typing import TYPE_CHECKING, Iterator

from django.conf import settings
from django.db import migrations, transaction
from django.db.utils import OperationalError
from django.utils import timezone

from sales.apps.sales.interfaces import ProductSnapshot

if TYPE_CHECKING:
    from sales.apps.products.models import Product
    from sales.apps.sales.models import SalesRecord


def generate_sales_records(
    product_class: 'Product',
    sales_record_class: 'SalesRecord',
) -> Iterator[list['SalesRecord']]:
    """
    Generator method that creates 1000 instances of `SalesRecord` for each existing product.
    """

    products = list(product_class.objects.all())
    for product in products:
        records: list['SalesRecord'] = []
        for _ in range(1000):
            quantity_sold = random.randint(1, 10)

            record = sales_record_class(
                uuid=uuid.uuid4(),
                product=product,
                product_snapshot=ProductSnapshot(
                    name=product.name,
                    category=product.category,
                    price=str(product.price),
                ),
                quantity_sold=quantity_sold,
                total_sales_amount=product.price * quantity_sold,
                date_of_sale=timezone.now() - datetime.timedelta(days=random.randint(1, 365)),
            )
            records.append(record)

            if len(records) >= 1000:
                yield records
                records = []

        if records:
            yield records


def create_products_and_sales_records(apps, schema_editor):
    if settings.TESTING:
        return

    Product: 'Product' = apps.get_model('products', 'Product')
    SalesRecord: 'SalesRecord' = apps.get_model('sales', 'SalesRecord')

    start_time = time.time()

    try:
        with transaction.atomic():
            products: list['Product'] = []

            for i in range(1000):
                products.append(
                    Product(
                        uuid=uuid.uuid4(),
                        name=f'Product {i+1}',
                        category='main category' if i % 100 == 0 else f'category {i}',
                        price=round(random.uniform(10, 500), 2),
                    )
                )

            Product.objects.bulk_create(products)

            for records in generate_sales_records(
                product_class=Product,
                sales_record_class=SalesRecord,
            ):
                SalesRecord.objects.bulk_create(records)
    except OperationalError as e:
        print(f'OperationalError: {e}')

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(
        '\033[92m\nSuccesfully created 1000 products and 1 million sales records.\n'
        f'Time taken: {elapsed_time:.2f} seconds\033[0m',
    )


class Migration(migrations.Migration):

    dependencies = [
        ('sales', '0001_initial'),
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_products_and_sales_records, migrations.RunPython.noop),
    ]
